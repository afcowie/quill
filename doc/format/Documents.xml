<?xml version="1.0" encoding="UTF-8"?>
<quack xmlns="http://namespace.operationaldynamics.com/parchment/0.5">
<chapter>
Documents
</chapter>
<text>
Since the Quack schema describes a single chapter, we need something
to express what a book or other work is. It doesn't need much.
A book is, after all, just a series of chapters. So, we need
is a single file which is "the work" which lists the component
files that make it up.
</text>
<text>
<project>Quill and Parchment</project> is about separation of
content and presentation; the code in the <type>RenderEngine</type>s
already know how to do almost all the formatting necessary. There
are a few configurable knobs though, and their settings need
to go somewhere. The document container is the place.
</text>
<text>
Finally, there are a <italics>very few</italics> global properties
that go with a document. Frankly this isn't much more than what
language dictionary to use to spell check the document, but again,
it has to go somewhere.
</text>
<text>
So we have three things we need to store: content (the list of
files with the text body), presentation (what renderer to use
and how to configure it), and metadata. And that's it.
</text>
<text>
Here is the <literal>.parchment</literal> file for this document:
</text>
<code xml:space="preserve">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;manuscript xmlns="http://namespace.operationaldynamics.com/parchment/0.5"&gt;
  &lt;content&gt;
    &lt;chapter src="Background.xml"/&gt;
    &lt;chapter src="Chapters.xml"/&gt;
    &lt;chapter src="Documents.xml"/&gt;
  &lt;/content&gt;
  &lt;presentation&gt;
    &lt;renderer class="parchment.render.ReportRenderEngine"/&gt;
    &lt;paper size="A4"/&gt;
    &lt;margins top="15.0" left="20.0" right="12.5" bottom="10.0"/&gt;
    &lt;font serif="Linux Libertine O" size="3.2"/&gt;
    &lt;font sans="Liberation Sans" size="2.6"/&gt;
    &lt;font mono="Inconsolata" size="3.0"/&gt;
    &lt;font heading="Linux Libertine O C" size="5.6"/&gt;
  &lt;/presentation&gt;
  &lt;metadata&gt;
    &lt;document title="The Parchment File Format"/&gt;
    &lt;author name="Andrew Cowie"/&gt;
    &lt;spelling lang="en_CA"/&gt;
  &lt;/metadata&gt;
&lt;/manuscript&gt;
</code>
<text>
Pretty simple! That's in
<filename>ParchmentFileFormat.parchment</filename>. The user
can call their documents anything they want, of course.
<project>Quill</project> is set up so that when it generates
a <acronym>PDF</acronym> it will use the document's base name
for where it will write; <filename>ParchmentFileFormat.pdf</filename>
in this case.
</text>
<heading>
Content
</heading>
<text>
The <literal>&lt;content&gt;</literal> section is simply a list
of the components which make up the document. Contains only
<literal>&lt;chapter&gt;</literal> elements, one file per element.
</text>
<text>
Don't get excited if your component isn't a chapter. An "article"
is a document with one chapter. Things like part separators and
front and back matter are also contained in Quack format files.
</text>
<heading>
Presentation
</heading>
<text>
The <literal>&lt;presentation&gt;</literal> section specifies
the minimal amount of information that defines how the document
is to be rendered to paper. By design, most of the details of
how the output will look is in the code of the
<type>RenderEngine</type>s. The document itself needs to know
which one is to be used to print it, and to what size of paper.
</text>
<text>
There are only two valid paper sizes, <literal>Letter</literal>
and <literal>A4</literal>. That's because, regardless of the
page size that's going to be used in final production, . It is
important to know your audience, though, and one does have to
be picked; you can't generate a <acronym>PDF</acronym> for both
sizes simultaneously; text flow and pagination depends on available
area and that depends on paper size.
</text>
<text>
Margins are expressed in milimetres.
</text>
<text>
Font sizes are also in milimetres. This is different than the
usual "points" in part to make it clear that "a 12 point font"
is not 12 points high; it ends up being however high the graphics
subsystem chooses; typically people are used to seeing things
fixed at 96 <acronym>dpi</acronym> but that has nothing to do
with a 1200 <acronym>dpi</acronym> printer or even the ~130
<acronym>dpi</acronym> that modern monitors are achieving.
</text>
<heading>
Metadata
</heading>
<text>
Finally is <literal>&lt;metadata&gt;</literal>. This section
was added when we tackled spell checking and the need for a Quill
to know what dictionary to load. The
<literal>&lt;spelling&gt;</literal> element specifies an
<project>Enchant</project> dictionary "language tag".
</text>
<text>
Not long after that we added support for rendering headers and
footers and realized we needed somewhere for the author and title
of the work as a whole. Note that there are <italics>not</italics>
multiple <literal>&lt;author&gt;</literal> elements; this is
just for use in a header or footer, so if there are two of you
it's <literal>"Kermit and Fozzie"</literal> and if more, well,
that's up to you, but <literal>"Kermit, et al"</literal> would
do pretty well.
</text>
<text>
Document title is available for headers or footers, and also
shows up in the Outline when you're editing with
<project>Quill</project>.
</text>
</quack>
